// Generated by gencpp from file utils/IMU.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_IMU_H
#define UTILS_MESSAGE_IMU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace utils
{
template <class ContainerAllocator>
struct IMU_
{
  typedef IMU_<ContainerAllocator> Type;

  IMU_()
    : roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , accelx(0.0)
    , accely(0.0)
    , accelz(0.0)  {
    }
  IMU_(const ContainerAllocator& _alloc)
    : roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , accelx(0.0)
    , accely(0.0)
    , accelz(0.0)  {
  (void)_alloc;
    }



   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _accelx_type;
  _accelx_type accelx;

   typedef float _accely_type;
  _accely_type accely;

   typedef float _accelz_type;
  _accelz_type accelz;





  typedef boost::shared_ptr< ::utils::IMU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::IMU_<ContainerAllocator> const> ConstPtr;

}; // struct IMU_

typedef ::utils::IMU_<std::allocator<void> > IMU;

typedef boost::shared_ptr< ::utils::IMU > IMUPtr;
typedef boost::shared_ptr< ::utils::IMU const> IMUConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::IMU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::IMU_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::utils::IMU_<ContainerAllocator1> & lhs, const ::utils::IMU_<ContainerAllocator2> & rhs)
{
  return lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.accelx == rhs.accelx &&
    lhs.accely == rhs.accely &&
    lhs.accelz == rhs.accelz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::utils::IMU_<ContainerAllocator1> & lhs, const ::utils::IMU_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::utils::IMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::IMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::IMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::IMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::IMU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::IMU_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8fed42843ff3c5fe8b5a827617e1d2e5";
  }

  static const char* value(const ::utils::IMU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8fed42843ff3c5feULL;
  static const uint64_t static_value2 = 0x8b5a827617e1d2e5ULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/IMU";
  }

  static const char* value(const ::utils::IMU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
"float32 accelx\n"
"float32 accely\n"
"float32 accelz\n"
;
  }

  static const char* value(const ::utils::IMU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::IMU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.accelx);
      stream.next(m.accely);
      stream.next(m.accelz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IMU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::IMU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::IMU_<ContainerAllocator>& v)
  {
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "accelx: ";
    Printer<float>::stream(s, indent + "  ", v.accelx);
    s << indent << "accely: ";
    Printer<float>::stream(s, indent + "  ", v.accely);
    s << indent << "accelz: ";
    Printer<float>::stream(s, indent + "  ", v.accelz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_IMU_H
